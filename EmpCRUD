//HTML
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee List</title>
    <link rel="stylesheet" href="styles.css"> <!-- Link to your CSS file -->
</head>
<body>
    <div class="container">
        <h2>Employee List</h2>
        <table id="employeeTable">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Department</th>
                    <th>ECN</th>
                    <th>Phone</th>
                    <th>Gender</th>
                    <th>Hobbies</th>
                    <th>Address</th>
                </tr>
            </thead>
            <tbody id="employeeTableBody">
                <!-- Employee rows will be populated here -->
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div id="pagination">
            <button id="prevPage" style="display: none;">Previous</button>
            <button id="nextPage" style="display: none;">Next</button>
        </div>
    </div>

    <script src="updateEmp.js"></script> <!-- Link to your JavaScript file -->
</body>
</html>


//CSS
/* styles.css */
body {
    font-family: Arial, sans-serif;
    margin: 20px;
}

.container {
    max-width: 800px;
    margin: auto;
}

table {
    width: 100%;
    border-collapse: collapse;
}

table, th, td {
    border: 1px solid black;
}

th, td {
    padding: 8px;
    text-align: left;
}

th {
    background-color: #f2f2f2;
}

#pagination {
    margin-top: 10px;
}

button {
    padding: 10px 15px;
    margin: 0 5px;
    cursor: pointer;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
}

button:hover {
    background-color: #0056b3;
}


//JS
// updateEmp.js
document.addEventListener("DOMContentLoaded", () => {
    const employeeTableBody = document.getElementById("employeeTableBody");
    const prevPage = document.getElementById("prevPage");
    const nextPage = document.getElementById("nextPage");

    let currentPage = 0;
    const pageSize = 2; // Set your default page size here

    const fetchEmpData = async (pageNo) => {
        const response = await fetch(`http://localhost:8080/api/emp/paginated?pageNo=${pageNo}&pageSize=${pageSize}`);
        if (!response.ok) {
            throw new Error(`Error fetching employees: ${response.status}`);
        }
        return await response.json();
    };

    const populateTable = (employees) => {
        employeeTableBody.innerHTML = ""; // Clear the table body
        employees.content.forEach(employee => {
            const row = `<tr>
                <td>${employee.id}</td>
                <td>${employee.name}</td>
                <td>${employee.department}</td>
                <td>${employee.ecn}</td>
                <td>${employee.phone}</td>
                <td>${employee.gender}</td>
                <td>${employee.hobbies.join(", ")}</td>
                <td>${employee.address}</td>
            </tr>`;
            employeeTableBody.innerHTML += row;
        });

        // Update pagination
        prevPage.style.display = currentPage > 0 ? "block" : "none";
        nextPage.style.display = currentPage < employees.totalPages - 1 ? "block" : "none";
    };

    const loadEmployees = async () => {
        try {
            const employees = await fetchEmpData(currentPage);
            populateTable(employees);
        } catch (error) {
            console.error(error);
        }
    };

    prevPage.addEventListener("click", (event) => {
        event.preventDefault();
        if (currentPage > 0) {
            currentPage--;
            loadEmployees();
        }
    });

    nextPage.addEventListener("click", (event) => {
        event.preventDefault();
        currentPage++;
        loadEmployees();
    });

    loadEmployees(); // Initial load
});

Explanation of the Code
HTML Structure:

The HTML contains a table for displaying employee data and buttons for pagination.
The id attributes on the buttons allow for easy access from JavaScript.
CSS Styles:

Basic styles for the table and buttons are provided to make them visually appealing.
JavaScript Logic:

The script fetches employee data from the backend using the fetchEmpData function.
The populateTable function populates the table with employee data.
Pagination buttons (Previous and Next) navigate between pages by changing the currentPage variable and reloading the employee data.
Testing
Make sure your backend service is running and correctly returning paginated employee data.
Open the HTML file in a browser to see the employee list and test the pagination functionality.
